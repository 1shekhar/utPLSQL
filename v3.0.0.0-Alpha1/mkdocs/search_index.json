{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction to utPLSQL\n\n\nutPLSQL is a powerful unit testing library for Oracle PL/SQL.\n\n\nTODO: Sales pitch of utPLSQL with links to documentation areas that support discussed features.\n\n\nTODO: Table of Contents / Index of the docs", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction-to-utplsql", 
            "text": "utPLSQL is a powerful unit testing library for Oracle PL/SQL.  TODO: Sales pitch of utPLSQL with links to documentation areas that support discussed features.  TODO: Table of Contents / Index of the docs", 
            "title": "Introduction to utPLSQL"
        }, 
        {
            "location": "/userguide/install/", 
            "text": "Installation\n\n\nTo simply install the utPLSQL into a new database schema and grant it to public, execute the script \ninstall_headless.sql\n.\n\n\nThis will create a new user \nUT3\n with password \nUT3\n, grant all needed privileges to that user and create PUBLIC synonyms needed to sue the utPLSQL framework.\n\n\nExample invocation of the script from command line:\n\n\ncd source\nsqlplus admin/admins_password@xe @@install_headless.sql  \n\n\n\n\nRecommended Schema\n\n\nIt is recommended to install utPLSQL in it's own schema. You are free to choose any name for this schema.\n\n\nThe installation user/schema must have the following Oracle system permissions during the installation.\n  - CREATE SESSION\n  - CREATE PROCEDURE\n  - CREATE TYPE\n  - CREATE TABLE\n  - CREATE SYNONYM\n  - ALTER SESSION\n\n\nIn addition it must be granted execute to the following system packages.\n\n\n\n\nDBMS_PIPE  \n\n\n\n\nInstallation Procedure\n\n\nCreating schema for utPLSQL\n\n\nTo create the utPLSQL schema and grant all the needed privileges execute script \ncreate_utplsql_owner.sql\n from the \nsource\n directory with parameters:\n- \nuser name\n - the name of the user that will own of utPLSQL object\n- \npassword\n  - the password to be set for that user\n- \ntablespace name\n - the tablespace name to hold data created during test execution\n\n\nExample invocation of the script from command line:\n\n\ncd source\nsqlplus admin/admins_password@xe @@create_utPLSQL_owner.sql ut3 ut3 users  \n\n\n\n\nInstalling utPLSQL\n\n\nTo install the utPLSQL sources into your database run the \n/source/install.sql\n script and provide the \nschema name\n where utPLSQL is to be installed\n\nYou need to install the utPLSQL sources into a already existing database schema.\nYou may install it from any account that has sufficient privileges to create objects in other users schema.\nYou may also choose to install it directly into the schema owning the package.  \n\n\nExample invocation of the script from command line:\n\n\ncd source\nsqlplus admin/admins_password@xe @@install.sql ut3  \n\n\n\n\nAllowing other users to access utPLSQL framework\n\n\nIn order to allow other users to access utPLSQL, synonyms must be created and grants need to be added.\nYou have two options:\n- use public grants and synonyms, to allow any user to access the framework\n- use synonyms and grants for individual users to limit the access the the framework\n\n\nTo grant utPLSQL to public execute the script \nsource/create_synonyms_and_grants_for_public.sql\n and provide the provide \nschema name\n where utPLSQL is installed \n\n\nExample invocation of the script from command line:\n\n\ncd source\nsqlplus admin/admins_password@xe @@create_synonyms_and_grants_for_public.sql ut3  \n\n\n\n\nTo grant utPLSQL to individual user execute the script \nsource/create_synonyms_and_grants_for_user.sql\n and provide provide the \nschema name\n where utPLSQL is installed and \nuser name\n to be granted\n\n\nExample invocation of the script from command line:\n\n\ncd source\nsqlplus admin/admins_password@xe @@create_synonyms_and_grants_for_user.sql ut3 hr  \n\n\n\n\nThe following tools that support the SQL\nPlus commands can be used to run the installation script\n  - SQL\nPlus\n  - \nSQLcl\n\n  - \nOracle SQL Developer\n\n\nUninstalling utPLSQL\n\n\nTo uninstall run \n/source/uninstall.sql\n and provide the provide \nschema name\n where utPLSQL is installed.\n\n\nThe uninstall script will remove all the objects installed by the install script.\nAdditionally, all the public and private synonyms pointing to the objects in utPLSQL schema will be removed.\n\n\nIf you have you have extended any utPLSQL types such as a custom reporter, these will need to be dropped before the uninstall, otherwise the uninstall script might fail.\n\n\nIn order for the uninstall to be successful, you need to use the uninstall script, that was provided wht the exact version that was installed on your database.", 
            "title": "Installation"
        }, 
        {
            "location": "/userguide/install/#installation", 
            "text": "To simply install the utPLSQL into a new database schema and grant it to public, execute the script  install_headless.sql .  This will create a new user  UT3  with password  UT3 , grant all needed privileges to that user and create PUBLIC synonyms needed to sue the utPLSQL framework.  Example invocation of the script from command line:  cd source\nsqlplus admin/admins_password@xe @@install_headless.sql", 
            "title": "Installation"
        }, 
        {
            "location": "/userguide/install/#recommended-schema", 
            "text": "It is recommended to install utPLSQL in it's own schema. You are free to choose any name for this schema.  The installation user/schema must have the following Oracle system permissions during the installation.\n  - CREATE SESSION\n  - CREATE PROCEDURE\n  - CREATE TYPE\n  - CREATE TABLE\n  - CREATE SYNONYM\n  - ALTER SESSION  In addition it must be granted execute to the following system packages.   DBMS_PIPE", 
            "title": "Recommended Schema"
        }, 
        {
            "location": "/userguide/install/#installation-procedure", 
            "text": "", 
            "title": "Installation Procedure"
        }, 
        {
            "location": "/userguide/install/#creating-schema-for-utplsql", 
            "text": "To create the utPLSQL schema and grant all the needed privileges execute script  create_utplsql_owner.sql  from the  source  directory with parameters:\n-  user name  - the name of the user that will own of utPLSQL object\n-  password   - the password to be set for that user\n-  tablespace name  - the tablespace name to hold data created during test execution  Example invocation of the script from command line:  cd source\nsqlplus admin/admins_password@xe @@create_utPLSQL_owner.sql ut3 ut3 users", 
            "title": "Creating schema for utPLSQL"
        }, 
        {
            "location": "/userguide/install/#installing-utplsql", 
            "text": "To install the utPLSQL sources into your database run the  /source/install.sql  script and provide the  schema name  where utPLSQL is to be installed \nYou need to install the utPLSQL sources into a already existing database schema.\nYou may install it from any account that has sufficient privileges to create objects in other users schema.\nYou may also choose to install it directly into the schema owning the package.    Example invocation of the script from command line:  cd source\nsqlplus admin/admins_password@xe @@install.sql ut3", 
            "title": "Installing utPLSQL"
        }, 
        {
            "location": "/userguide/install/#allowing-other-users-to-access-utplsql-framework", 
            "text": "In order to allow other users to access utPLSQL, synonyms must be created and grants need to be added.\nYou have two options:\n- use public grants and synonyms, to allow any user to access the framework\n- use synonyms and grants for individual users to limit the access the the framework  To grant utPLSQL to public execute the script  source/create_synonyms_and_grants_for_public.sql  and provide the provide  schema name  where utPLSQL is installed   Example invocation of the script from command line:  cd source\nsqlplus admin/admins_password@xe @@create_synonyms_and_grants_for_public.sql ut3    To grant utPLSQL to individual user execute the script  source/create_synonyms_and_grants_for_user.sql  and provide provide the  schema name  where utPLSQL is installed and  user name  to be granted  Example invocation of the script from command line:  cd source\nsqlplus admin/admins_password@xe @@create_synonyms_and_grants_for_user.sql ut3 hr    The following tools that support the SQL Plus commands can be used to run the installation script\n  - SQL Plus\n  -  SQLcl \n  -  Oracle SQL Developer", 
            "title": "Allowing other users to access utPLSQL framework"
        }, 
        {
            "location": "/userguide/install/#uninstalling-utplsql", 
            "text": "To uninstall run  /source/uninstall.sql  and provide the provide  schema name  where utPLSQL is installed.  The uninstall script will remove all the objects installed by the install script.\nAdditionally, all the public and private synonyms pointing to the objects in utPLSQL schema will be removed.  If you have you have extended any utPLSQL types such as a custom reporter, these will need to be dropped before the uninstall, otherwise the uninstall script might fail.  In order for the uninstall to be successful, you need to use the uninstall script, that was provided wht the exact version that was installed on your database.", 
            "title": "Uninstalling utPLSQL"
        }, 
        {
            "location": "/userguide/getting-started/", 
            "text": "Getting Started\n\n\nTODO: A quick guide to writing your first unit test.  This should not get into all the options available instead it should link to that documentation where it is appropriate.    This really should be a high level look at the product.   It should take the point of view of someone who has never written a unit test in any language.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/userguide/getting-started/#getting-started", 
            "text": "TODO: A quick guide to writing your first unit test.  This should not get into all the options available instead it should link to that documentation where it is appropriate.    This really should be a high level look at the product.   It should take the point of view of someone who has never written a unit test in any language.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/userguide/annotations/", 
            "text": "Annotations\n\n\nAnnotations provide a way to configure tests and suites in a declarative way similar to modern OOP languages.\nThe annotation list is based on moder testing framework such as jUnit 5, RSpec.\n\n\nAnnotations allow to configure test infrastructure in a declarative way without anything stored in tables or config files. The framework runner scans the schema for all the suitable annotated packages, automatically configures suites, forms hierarchy from then and executes them.\n\n\nExample of annotated package\n\n\ncreate or replace package test_pkg is\n\n  -- %suite(Name of suite)\n  -- %suitepath(all.globaltests)\n\n  -- %beforeall\n  procedure globalsetup;\n\n  -- %afterall\n  procedure global_teardown;\n\n  /* Such comments are allowed */\n\n  -- %test\n  -- %displayname(Name of test1)\n  procedure test1;\n\n  -- %test(Name of test2)\n  -- %beforetest(setup_test1)\n  -- %aftertest(teardown_test1)\n  procedure test2;\n\n  -- %test\n  -- %displayname(Name of test3)\n  -- %disable\n  procedure test3;\n\n  -- %test(Name of test4)\n  -- %rollback(manual)\n  procedure test4;\n\n  procedure setup_test1;\n\n  procedure teardown_test1;\n\n  -- %beforeeach\n  procedure setup;\n\n  -- %aftereach\n  procedure teardown;\n\nend test_pkg;\n\n\n\n\nAnnotations meaning\n\n\n\n\n\n\n\n\nAnnotation\n\n\nLevel\n\n\nDescribtion\n\n\n\n\n\n\n\n\n\n\n%suite(\ndescription\n)\n\n\nPackage\n\n\nMarks package to be a suite of tests This way all testing packages might be found in a schema. Optional schema discription can by provided, similar to \n%displayname\n annotation.\n\n\n\n\n\n\n%suitepath(\npath\n)\n\n\nPackage\n\n\nSimilar to java package. The annotation allows logical grouping of suites into hierarcies.\n\n\n\n\n\n\n%displayname(\ndescription\n)\n\n\nPackage/procedure\n\n\nHuman-familiar describtion of the suite/test. Syntax is based on jUnit annotation: \n%displayname(Name of the suite/test)\n\n\n\n\n\n\n%test(\ndescription\n)\n\n\nProcedure\n\n\nDenotes that a method is a test method.  Optional test discription can by provided, similar to \n%displayname\n annotation.\n\n\n\n\n\n\n%beforeall\n\n\nProcedure\n\n\nDenotes that the annotated procedure should be executed once before all elements of the current suite.\n\n\n\n\n\n\n%afterall\n\n\nProcedure\n\n\nDenotes that the annotated procedure should be executed once after all elements of the current suite.\n\n\n\n\n\n\n%beforeeach\n\n\nProcedure\n\n\nDenotes that the annotated procedure should be executed before each \n%test\n method in the current suite.\n\n\n\n\n\n\n%aftereach\n\n\nProcedure\n\n\nDenotes that the annotated procedure should be executed after each \n%test\n method in the current suite.\n\n\n\n\n\n\n%beforetest(\nprocedure_name\n)\n\n\nProcedure\n\n\nDenotes that mentioned procedure should be executed before the annotated \n%test\n procedure.\n\n\n\n\n\n\n%aftertest(\nprocedure_name\n)\n\n\nProcedure\n\n\nDenotes that mentioned procedure should be executed after the annotated \n%test\n procedure.\n\n\n\n\n\n\n%rollback(\ntype\n)\n\n\nPackage/procedure\n\n\nConfigure transaction control behaviour (type). Supported values: \nauto\n(default) - rollback to savepoint (before the test/suite setup) is issued after each test/suite teardown; \nmanual\n - rollback is never issued automatically. Property can be overridden for child element (test in suite)\n\n\n\n\n\n\n%disable\n\n\nPackage/procedure\n\n\nUsed to disable a suite or a test", 
            "title": "Annotations"
        }, 
        {
            "location": "/userguide/annotations/#annotations", 
            "text": "Annotations provide a way to configure tests and suites in a declarative way similar to modern OOP languages.\nThe annotation list is based on moder testing framework such as jUnit 5, RSpec.  Annotations allow to configure test infrastructure in a declarative way without anything stored in tables or config files. The framework runner scans the schema for all the suitable annotated packages, automatically configures suites, forms hierarchy from then and executes them.", 
            "title": "Annotations"
        }, 
        {
            "location": "/userguide/annotations/#example-of-annotated-package", 
            "text": "create or replace package test_pkg is\n\n  -- %suite(Name of suite)\n  -- %suitepath(all.globaltests)\n\n  -- %beforeall\n  procedure globalsetup;\n\n  -- %afterall\n  procedure global_teardown;\n\n  /* Such comments are allowed */\n\n  -- %test\n  -- %displayname(Name of test1)\n  procedure test1;\n\n  -- %test(Name of test2)\n  -- %beforetest(setup_test1)\n  -- %aftertest(teardown_test1)\n  procedure test2;\n\n  -- %test\n  -- %displayname(Name of test3)\n  -- %disable\n  procedure test3;\n\n  -- %test(Name of test4)\n  -- %rollback(manual)\n  procedure test4;\n\n  procedure setup_test1;\n\n  procedure teardown_test1;\n\n  -- %beforeeach\n  procedure setup;\n\n  -- %aftereach\n  procedure teardown;\n\nend test_pkg;", 
            "title": "Example of annotated package"
        }, 
        {
            "location": "/userguide/annotations/#annotations-meaning", 
            "text": "Annotation  Level  Describtion      %suite( description )  Package  Marks package to be a suite of tests This way all testing packages might be found in a schema. Optional schema discription can by provided, similar to  %displayname  annotation.    %suitepath( path )  Package  Similar to java package. The annotation allows logical grouping of suites into hierarcies.    %displayname( description )  Package/procedure  Human-familiar describtion of the suite/test. Syntax is based on jUnit annotation:  %displayname(Name of the suite/test)    %test( description )  Procedure  Denotes that a method is a test method.  Optional test discription can by provided, similar to  %displayname  annotation.    %beforeall  Procedure  Denotes that the annotated procedure should be executed once before all elements of the current suite.    %afterall  Procedure  Denotes that the annotated procedure should be executed once after all elements of the current suite.    %beforeeach  Procedure  Denotes that the annotated procedure should be executed before each  %test  method in the current suite.    %aftereach  Procedure  Denotes that the annotated procedure should be executed after each  %test  method in the current suite.    %beforetest( procedure_name )  Procedure  Denotes that mentioned procedure should be executed before the annotated  %test  procedure.    %aftertest( procedure_name )  Procedure  Denotes that mentioned procedure should be executed after the annotated  %test  procedure.    %rollback( type )  Package/procedure  Configure transaction control behaviour (type). Supported values:  auto (default) - rollback to savepoint (before the test/suite setup) is issued after each test/suite teardown;  manual  - rollback is never issued automatically. Property can be overridden for child element (test in suite)    %disable  Package/procedure  Used to disable a suite or a test", 
            "title": "Annotations meaning"
        }, 
        {
            "location": "/userguide/assertions/", 
            "text": "Assertion\n\n\nA test procedure will contain one or more checks to verify the the test performed as expected.   These checks are called assertion.   utPLSQL provides a robust and extensible assertion library. \n\n\nTODO: Finish assertion Documentation", 
            "title": "Assertions"
        }, 
        {
            "location": "/userguide/assertions/#assertion", 
            "text": "A test procedure will contain one or more checks to verify the the test performed as expected.   These checks are called assertion.   utPLSQL provides a robust and extensible assertion library.   TODO: Finish assertion Documentation", 
            "title": "Assertion"
        }, 
        {
            "location": "/userguide/best-practices/", 
            "text": "Best Practices\n\n\nThe following are best practices we as utPLSQL have learned about PL/SQL and Unit Testing. \n\n\nTest Interaction\n\n\n\n\nTests should not depend on a specific order to run. \n\n\nTests should not depend on other tests to execute.\n\n\nA developer should be able to run one or more tests of their choosing with out any prerequisites.\n\n\n\n\nTests are not for production\n\n\nTests generate will generate fake data, so it should go without saying.   You should not deploy your tests to a production database.\n\n\nTests and their relationship to code under test.\n\n\n\n\nCode that you want to test, and the tests should be in separate packages.\n\n\nTest code commonly will be the same schema as code \n\n\n\n\nVersion Control\n\n\nUse a version control system for your code.   Don't just trust the database for code storage.    This includes both the code you have under test, and the unit tests you develop as well.", 
            "title": "Testing Best Pracitces"
        }, 
        {
            "location": "/userguide/best-practices/#best-practices", 
            "text": "The following are best practices we as utPLSQL have learned about PL/SQL and Unit Testing.", 
            "title": "Best Practices"
        }, 
        {
            "location": "/userguide/best-practices/#test-interaction", 
            "text": "Tests should not depend on a specific order to run.   Tests should not depend on other tests to execute.  A developer should be able to run one or more tests of their choosing with out any prerequisites.", 
            "title": "Test Interaction"
        }, 
        {
            "location": "/userguide/best-practices/#tests-are-not-for-production", 
            "text": "Tests generate will generate fake data, so it should go without saying.   You should not deploy your tests to a production database.", 
            "title": "Tests are not for production"
        }, 
        {
            "location": "/userguide/best-practices/#tests-and-their-relationship-to-code-under-test", 
            "text": "Code that you want to test, and the tests should be in separate packages.  Test code commonly will be the same schema as code", 
            "title": "Tests and their relationship to code under test."
        }, 
        {
            "location": "/userguide/best-practices/#version-control", 
            "text": "Use a version control system for your code.   Don't just trust the database for code storage.    This includes both the code you have under test, and the unit tests you develop as well.", 
            "title": "Version Control"
        }, 
        {
            "location": "/userguide/upgrade/", 
            "text": "How to upgrade from prior versions\n\n\nTODO: Finish this documentation.", 
            "title": "Upgrade utPLSQL"
        }, 
        {
            "location": "/userguide/upgrade/#how-to-upgrade-from-prior-versions", 
            "text": "TODO: Finish this documentation.", 
            "title": "How to upgrade from prior versions"
        }, 
        {
            "location": "/about/project-details/", 
            "text": "utPLSQL Project Details\n\n\n\n\n\n\n\n\n\n\nutPLSQL is hosted on \nhosted on GitHub\n and open source project.\n\n\nCommunity help on this project is always appreciated, if your interested in helping please read our \nguide to contributing", 
            "title": "Project Details"
        }, 
        {
            "location": "/about/project-details/#utplsql-project-details", 
            "text": "utPLSQL is hosted on  hosted on GitHub  and open source project.  Community help on this project is always appreciated, if your interested in helping please read our  guide to contributing", 
            "title": "utPLSQL Project Details"
        }, 
        {
            "location": "/about/license/", 
            "text": "Version Information\n\n\nutPLSQL version 3\n is licensed under [Apache 2.0]\n(https://www.apache.org/licenses/LICENSE-2.0)\n\n\nExternal code used in the development of this project, but is not required for use.\n\n\n\n\n\n\n\n\nTool\n\n\nLicense\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nTravis-Oracle\n\n\nISC\n\n\nInstall Oracle for Travis Builds\n\n\n\n\n\n\nmkDocs\n\n\nBSD\n\n\nProduce HTML version of documentation\n\n\n\n\n\n\n\n\nNote:\n Version 1 \n 2 of utPLSQL were licensed under GPL, version 3 was a complete rewrite from scratch which a allowed us to change the license to a more permissive license.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#version-information", 
            "text": "utPLSQL version 3  is licensed under [Apache 2.0]\n(https://www.apache.org/licenses/LICENSE-2.0)  External code used in the development of this project, but is not required for use.     Tool  License  Purpose      Travis-Oracle  ISC  Install Oracle for Travis Builds    mkDocs  BSD  Produce HTML version of documentation     Note:  Version 1   2 of utPLSQL were licensed under GPL, version 3 was a complete rewrite from scratch which a allowed us to change the license to a more permissive license.", 
            "title": "Version Information"
        }, 
        {
            "location": "/about/support/", 
            "text": "How to get support\n\n\n\n\nFeel free post questions, bugs or issues]to the \nissues area of GitHub\n.\n\n\nJoin developers the \nutPLSQL team\n on \nSlack", 
            "title": "Support"
        }, 
        {
            "location": "/about/support/#how-to-get-support", 
            "text": "Feel free post questions, bugs or issues]to the  issues area of GitHub .  Join developers the  utPLSQL team  on  Slack", 
            "title": "How to get support"
        }
    ]
}